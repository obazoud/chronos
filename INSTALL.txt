# sudo vi /etc/profile
#export http_proxy=http://10.200.1.44:8080

# sudo vi /etc/apt/apt.conf.d/proxy
Acquire::http::Proxy "http://10.200.1.44:8080";

# vi ~/.vimrc
syntax enable
:set background=dark
:set expandtab
:set tabstop=4

# Unistall startup services
services="ers-apache gemfire-gf01 gemfire-jmx gemfire-locator hyperic-agent hyperic-server rabbitmq-server tcserver-tc01"
for service in $services; do 
echo "Stopping $service"
update-rc.d -f "$service" remove
done

# updating ubuntu
sudo apt-get update && sudo apt-get upgrade --yes --fix-broken
sudo apt-get install curl
sudo apt-get install apache2-utils

sudo vi /etc/cron.daily/ntpdate
ntpdate 10.50.80.7
sudo chmod 755 /etc/cron.daily/ntpdate

# couchdb http://www.couchbase.com
su -
cd /opt
wget http://c3145442.r42.cf0.rackcdn.com/couchbase-server-enterprise_x86_64_1.1.deb
dpkg -i couchbase-server-enterprise_x86_64_1.1.deb
cd couchbase-server
ln -s /etc/init.d/couchdb etc/init.d/couchdb

# sur usi1
cd /usr/local
wget http://mirrors.ukfast.co.uk/sites/ftp.apache.org//maven/binaries/apache-maven-3.0.3-bin.tar.gz 
tar xzf apache-maven-3.0.3-bin.tar.gz
ln -s apache-maven-3.0.3 apache-maven

deb http://ppa.launchpad.net/git-core/ppa/ubuntu lucid main 
deb-src http://ppa.launchpad.net/git-core/ppa/ubuntu lucid main 

# redis
http://library.linode.com/databases/redis/ubuntu-10.04-lucid
adduser --system --no-create-home --disabled-login --disabled-password --group redis
sudo chmod 755 /var/lib/redis
sudo chmod 755 /var/lib/redis/dump.rdb
# faire tous les fichiers
update-rc.d -f redis defaults
ln -s /home/user/deploiement/install/etc/init.d/redis redis

# node.js
adduser --system --no-create-home --disabled-login --disabled-password --group nodejs
ln -s /home/user/deploiement/install/etc/init.d/nodejs nodejs

# Optim systeme
http://www.ubuntu-unleashed.com/2008/04/howto-harden-ubuntu-linux-kernel-with.html

http://www.cyberciti.biz/files/linux-kernel/Documentation/networking/ip-sysctl.txt
http://serverfault.com/questions/10852/what-limits-the-maximum-number-of-connections-on-a-linux-server
http://redmine.lighttpd.net/wiki/1/Docs:Performance
http://www.metabrew.com/article/a-million-user-comet-application-with-mochiweb-part-1
http://www.acc.umu.se/~maswan/linux-netperf.txt

http://www.tigase.org/content/tigase-load-tests-again-500k-user-connections
http://www.java.net/external?url=http://andrigoss.blogspot.com/2008/02/jvm-performance-tuning.html

#tsung
sudo apt-get install gnuplot-nox libtemplate-perl libhtml-template-perl libhtml-template-expr-perl
 http://tsung.erlang-projects.org/dist/tsung-1.3.3.tar.gz ~$ tar -zxvf tsung-1.3.0.tar.gz ~$ cd tsung-1.3.0 ~/tsung-1.3.0$ ./configure && make && sudo make instal

ulimit -a
ulimit -Hn
ulimit -Sn
sudo bash
ulimit -n 999999

cat /proc/sys/fs/file-max
sudo vi /etc/sysctl.conf
# Increase size of file handles and inode cache
fs.file-max = 209708
# Increase number of incoming connections backlog
net.core.somaxconn = 512

# General gigabit tuning:
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.ipv4.tcp_rmem = 4096 87380 16777216
net.ipv4.tcp_wmem = 4096 65536 16777216
net.ipv4.tcp_syncookies = 1
# this gives the kernel more memory for tcp
# which you need with many (100k+) open socket connections
net.ipv4.tcp_mem = 50576   64768   98152
net.core.netdev_max_backlog = 2500
# I was also masquerading the port comet was on, you might not need this
net.ipv4.netfilter.ip_conntrack_max = 1048576
net.ipv4.tcp_fin_timeout=1
# increase system IP port limits
net.ipv4.ip_local_port_range = 1024 65535

# system
#kernel.shmmax = 4294967296
#vm.nr_hugepages = 2048
vm.swappiness = 0

sudo vi /etc/security/limits.conf
user      hard    nofile             65535
user      soft    nofile             65535
sysctl -p

####################
# High-Availability
####################
# enable virtual server support in kernel 
sudo echo ip_vs_dh >> /etc/modules
sudo echo ip_vs_ftp >> /etc/modules
sudo echo ip_vs >> /etc/modules
sudo echo ip_vs_lblc >> /etc/modules
sudo echo ip_vs_lblcr >> /etc/modules
sudo echo ip_vs_lc >> /etc/modules
sudo echo ip_vs_nq >> /etc/modules
sudo echo ip_vs_rr >> /etc/modules
sudo echo ip_vs_sed >> /etc/modules
sudo echo ip_vs_sh >> /etc/modules
sudo echo ip_vs_wlc >> /etc/modules
sudo echo ip_vs_wrr >> /etc/modules

sudo modprobe ip_vs_dh
sudo modprobe ip_vs_ftp
sudo modprobe ip_vs
sudo modprobe ip_vs_lblc
sudo modprobe ip_vs_lblcr
sudo modprobe ip_vs_lc
sudo modprobe ip_vs_nq
sudo modprobe ip_vs_rr
sudo modprobe ip_vs_sed
sudo modprobe ip_vs_sh
sudo modprobe ip_vs_wlc
sudo modprobe ip_vs_wrr

# enable packet forwarding in /etc/sysctl.conf
net.ipv4.ip_forward = 1

# reload sysctl.conf
sysctl -p

# install heartbeat + ldirectord + all virtual server dependencies
sudo apt-get install heartbeat ldirectord

# disable IPVS at boot time, since it is managed from heartbeat
sudo dpkg-reconfigure ipvsadm
"Do you want to automatically load IPVS rules on boot?"
<-- No

"Select a daemon method."
<-- none

# copy the config from repo (authkeys, ha.cf, haresources, ldirectord.cf) :
sudo cp -r ~/deploiement/install/ha.d/* /etc/ha.d/.

# add heartbeat to rc init and remove ldirectord one (started by heartbeat)
update-rc.d heartbeat start 75 2 3 4 5 . stop 05 0 1 6 .
update-rc.d -f ldirectord remove

# stop ldirectord and start heartbeat
/etc/init.d/ldirectord stop
/etc/init.d/heartbeat start

# the virtual IP is 192.168.1.150 (can be modify) on port 80
# to work properly, http front service must run on port 80 and serve the /api/ping with a "pong" text content in response.
# first started heartbeat node will create the virtual interface, check this with
ip addr sh eth0
# check the lb with (always run on the heartbeat master node)
ldirectord ldirectord.cf status
# check the arp routing table from VIP to local IPs with :
ipvsadm -L -n

