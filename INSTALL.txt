1.1

rsync dans tmp de vfabric1 + ./deploy.sh
stop/start node
remettre la conf Redis avec les IPs / plugger le settings.js
verifier que les couchdb soit up / vor pq plusieurs instances ?
npm install http-proxy
changer chronos.js en server.js dans /etc/init.d/nodejs ?
Remove journey, implementation of my own router

---------------------------------------------
1.0

ps aux | grep -E "(redis|couchdb|node)"

# vi ~/.bashrc
# USI
# http_proxy
alias proxyon='export http_proxy=http://10.200.1.44:8080;echo $http_proxy'
alias proxyoff='export http_proxy=;echo $http_proxy'
export PATH=/home/user/node-v0.4.5/bin:$PATH
export PATH=/opt/redis:$PATH

# sudo vi /etc/apt/apt.conf.d/proxy
Acquire::http::Proxy "http://10.200.1.44:8080";

# vi ~/.vimrc
syntax enable
:set background=dark
:set expandtab
:set tabstop=4

# Unistall startup services
services="ers-apache gemfire-gf01 gemfire-jmx gemfire-locator hyperic-agent hyperic-server rabbitmq-server tcserver-tc01"
for service in $services; do 
echo "Stopping $service"
update-rc.d -f "$service" remove
done

# updating ubuntu
sudo apt-get update && sudo apt-get upgrade --yes --fix-broken
sudo apt-get install curl
sudo apt-get install apache2-utils

sudo vi /etc/cron.daily/ntpdate
ntpdate 10.50.80.7
sudo chmod 755 /etc/cron.daily/ntpdate

# couchdb http://www.couchbase.com
# http://wiki.apache.org/couchdb/Configurationfile_couch.ini
su -
cd /opt
wget http://c3145442.r42.cf0.rackcdn.com/couchbase-server-enterprise_x86_64_1.1.deb
dpkg -i couchbase-server-enterprise_x86_64_1.1.deb
rm /etc/init.d/couchbase-server
rm /etc/init.d/couchdb
cd /etc/init.d
ln -s /opt/couchbase-server/etc/init.d/couchdb /etc/init.d/couchdb
vi /opt/couchbase-server/etc/default/couchdb
Et mettre: COUCHDB_OPTIONS="-a /home/user/deploiement/install/couchdb/couchdb-`hostname`.ini"
update-rc.d -f couchdb remove
update-rc.d -f couchdb defaults
cd /opt
curl -iX GET http://localhost:5984
curl -iX PUT -d "{}" http://localhost:5984/thechallenge/test
curl -iX GET http://localhost:5984/thechallenge/test

# Replication couchdb
Via la vip sur le port 5984
vfabric3 est "master"
les autres sont en read only
On écrit seulement pendant la phase création de users & création du game
Le script install/couchdb/replication.sh est à placer dans un cron / 5mn
* * * * * /home/user/deploiement/install/couchdb/replication.sh
sudo apt-get install mailutils

# sur usi1
cd /usr/local
wget http://mirrors.ukfast.co.uk/sites/ftp.apache.org//maven/binaries/apache-maven-3.0.3-bin.tar.gz 
tar xzf apache-maven-3.0.3-bin.tar.gz
ln -s apache-maven-3.0.3 apache-maven

deb http://ppa.launchpad.net/git-core/ppa/ubuntu lucid main 
deb-src http://ppa.launchpad.net/git-core/ppa/ubuntu lucid main 

# redis
http://library.linode.com/databases/redis/ubuntu-10.04-lucid
adduser --system --no-create-home --disabled-login --disabled-password --group redis
mkdir /var/lib/redis
sudo chmod 755 /var/lib/redis
sudo chmod 755 /var/lib/redis/dump.rdb
# faire tous les fichiers
ln -s /home/user/deploiement/install/etc/init.d/redis /etc/init.d/redis
update-rc.d -f redis defaults
chown -R redis:redis /var/lib/redis/
redis-cli hset "test" toto 1
redis-cli save
OK
redis-cli hget "test" toto

# node.js
sudo apt-get install gcc
sudo apt-get install g++
sudo apt-get install python
sudo apt-get install  libssl-dev
sudo apt-get install openssl
proxyon && wget http://nodejs.org/dist/node-v0.4.5.tar.gz && proxyoff
tar -zxf node-v0.4.5.tar.gz
mv node-v0.4.5 node-v0.4.5-src
cd node-v0.4.5-src/
./configure --prefix=~/node-v0.4.5
make
make install
source ~/.bashrc
node --version
proxyon
curl http://npmjs.org/install.sh | npm_install=rc sh
npm --version
npm install cluster
#npm install journey
npm install node-uuid
npm install redis
npm install restler
#npm install twitter
npm install json
npm install http-proxy

proxyoff
sudo chown -R user:user /usr/local/var/log
ln -s /home/user/deploiement/install/etc/init.d/nodejs /etc/init.d/nodejs
update-rc.d -f nodejs defaults

# monit
sudo apt-get install monit
sudo vi /etc/default/monit
startup=1


# Optim systeme
http://www.ubuntu-unleashed.com/2008/04/howto-harden-ubuntu-linux-kernel-with.html

http://www.cyberciti.biz/files/linux-kernel/Documentation/networking/ip-sysctl.txt
http://serverfault.com/questions/10852/what-limits-the-maximum-number-of-connections-on-a-linux-server
http://redmine.lighttpd.net/wiki/1/Docs:Performance
http://www.metabrew.com/article/a-million-user-comet-application-with-mochiweb-part-1
http://www.acc.umu.se/~maswan/linux-netperf.txt

http://www.tigase.org/content/tigase-load-tests-again-500k-user-connections
http://www.java.net/external?url=http://andrigoss.blogspot.com/2008/02/jvm-performance-tuning.html

#tsung
sudo apt-get install erlang gnuplot-nox libtemplate-perl libhtml-template-perl libhtml-template-expr-perl
wget http://tsung.erlang-projects.org/dist/tsung-1.3.3.tar.gz 
tar -zxvf tsung-1.3.3.tar.gz
cd tsung-1.3.3
./configure && make && sudo make install

ulimit -a
ulimit -Hn
ulimit -Sn
sudo bash
ulimit -n 999999

cat /proc/sys/fs/file-max

# system
# /etc/sysctl.conf
su -
mv /etc/sysctl.conf /etc/sysctl.conf.default
ln -s /home/user/deploiement/install/etc/sysctl.conf /etc/sysctl.conf
# reload sysctl.conf
sysctl -p

sudo vi /etc/security/limits.conf
user      hard    nofile             65535
user      soft    nofile             65535
sysctl -p

####################
# High-Availability
####################
# enable virtual server support in kernel 
sudo echo ip_vs_dh >> /etc/modules
sudo echo ip_vs_ftp >> /etc/modules
sudo echo ip_vs >> /etc/modules
sudo echo ip_vs_lblc >> /etc/modules
sudo echo ip_vs_lblcr >> /etc/modules
sudo echo ip_vs_lc >> /etc/modules
sudo echo ip_vs_nq >> /etc/modules
sudo echo ip_vs_rr >> /etc/modules
sudo echo ip_vs_sed >> /etc/modules
sudo echo ip_vs_sh >> /etc/modules
sudo echo ip_vs_wlc >> /etc/modules
sudo echo ip_vs_wrr >> /etc/modules

sudo modprobe ip_vs_dh
sudo modprobe ip_vs_ftp
sudo modprobe ip_vs
sudo modprobe ip_vs_lblc
sudo modprobe ip_vs_lblcr
sudo modprobe ip_vs_lc
sudo modprobe ip_vs_nq
sudo modprobe ip_vs_rr
sudo modprobe ip_vs_sed
sudo modprobe ip_vs_sh
sudo modprobe ip_vs_wlc
sudo modprobe ip_vs_wrr

# install heartbeat + haproxy + all virtual server dependencies
sudo apt-get install ipvsadm heartbeat haproxy

# disable IPVS at boot time, since it is managed from heartbeat
sudo dpkg-reconfigure ipvsadm
"Do you want to automatically load IPVS rules on boot?"
<-- No

"Select a daemon method."
<-- none

# copy the heartbeat config from repo (authkeys, ha.cf, haresources) :
sudo ln -sf /home/user/deploiement/install/ha.d/* /etc/ha.d/.
sudo chmod 600 /etc/ha.d/authkeys

# copy the haproxy config from repo (haproxy.cfg) :
sudo ln -sf /home/user/deploiement/install/haproxy/haproxy.cfg /etc/haproxy/.

# add haproxy management by heartbeat (only one LB up at time)
sudo ln -sf /etc/init.d/haproxy /etc/ha.d/resource.d/.

# enable HAProxy daemon in /etc/default/haproxy
ENABLE=1

# add heartbeat to rc init and remove haproxy from (started by heartbeat)
sudo update-rc.d heartbeat start 75 2 3 4 5 . stop 05 0 1 6 .
sudo update-rc.d -f haproxy remove

# stop haproxy and start heartbeat
sudo /etc/init.d/haproxy stop
sudo /etc/init.d/heartbeat start

# the virtual IP is 192.168.1.150 (can be modify)
# haproxy listen to 192.168.1.150:80 and loadbalance (roundrobin) on vfabric1 to vfabric4 and usi1 on port 8080, adding a ServerId cookie with node's name.
# first started heartbeat node will create the virtual interface, check this with
ip addr sh eth0
# check the lb (always run on the heartbeat master node) with : (creds: chronos/chronos)
elinks http://192.168.1.150/haproxy?stats

